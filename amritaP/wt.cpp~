#include <iostream>
#include <stdio.h>
#include <string>

#define ld long double

using namespace std;


struct node{
	char c;
	int self;
	int right;
	int left;
	int parent;
	long long poly[100];
	int poly_calc;
	
};


node treeNodes[110];



void f(int i){
	if(i==-2){ 
//		cout<<"what happened"<<endl;
		return;
	}
	
	if(i==-1) return;
		
		
	
	if(treeNodes[i].poly_calc == 1) return; 
	
	f(treeNodes[i].left);
	f(treeNodes[i].right);
	
	
	   
	if(treeNodes[i].left == -1 && treeNodes[i].right == -1){
		if(treeNodes[i].c == 'M')
			treeNodes[i].poly[2] = 1;
	
		else if(treeNodes[i].c == 'm'){
			treeNodes[i].poly[2] = -1;
			treeNodes[i].poly[1] = 2;
		}
		
		else cout<<"Error "<<endl;
		treeNodes[i].poly_calc = 1;
        return;	
	}
	
	if(treeNodes[i].left == -1){
		if(treeNodes[i].c == 'M'){
			for(int j=1;j<100;j++)
				treeNodes[i].poly[j] = treeNodes[treeNodes[i].right].poly[j-1];
		}
		
		else if(treeNodes[i].c == 'm'){
			treeNodes[i].poly[1] = 1;
			
			for(int j=1;j<100;j++)
				treeNodes[i].poly[j] -= treeNodes[treeNodes[i].right].poly[j-1];
			
			for(int j=0;j<100;j++)
				treeNodes[i].poly[j] += treeNodes[treeNodes[i].right].poly[j];
        }
        
        else cout<<"Error "<<endl;
        treeNodes[i].poly_calc = 1;
        return; 	
	}
	
	
	if(treeNodes[i].right == -1){
		
		
		if(treeNodes[i].c == 'M'){
			for(int j=1;j<100;j++)
				treeNodes[i].poly[j] = treeNodes[treeNodes[i].left].poly[j-1];
		}
		
		else if(treeNodes[i].c == 'm'){
			
			treeNodes[i].poly[1] +=1;
			
			for(int j=1;j<100;j++){
				treeNodes[i].poly[j] -= treeNodes[treeNodes[i].left].poly[j-1];
	        }
	       
			
			for(int j=0;j<100;j++)
				treeNodes[i].poly[j] += treeNodes[treeNodes[i].left].poly[j];
        }
        
        else cout<<"Error "<<endl;
        treeNodes[i].poly_calc = 1;
        return; 	
	}
	
	
	if(treeNodes[i].c == 'M'){
		for(int k=0;k<100;k++){
			for(int j=0;j<=k;j++)
				treeNodes[i].poly[k] += treeNodes[treeNodes[i].left].poly[j] * treeNodes[treeNodes[i].right].poly[k-j];
	     }
	     
    } 
	
	
  else if(treeNodes[i].c == 'm'){
	 for(int j=0;j<100;j++)
	      treeNodes[i].poly[j] +=  treeNodes[treeNodes[i].left].poly[j] + treeNodes[treeNodes[i].right].poly[j];
	   
	 for(int k=0;k<100;k++){
			for(int j=0;j<=k;j++)
				treeNodes[i].poly[k] -= treeNodes[treeNodes[i].left].poly[j] * treeNodes[treeNodes[i].right].poly[k-j];
	     }     
	}
	
  else 
    cout<<"Error "<<endl;	
	treeNodes[i].poly_calc = 1;
	return;	
}
	




int main(){
	int T;
	cin>>T;
	while(T-->0){
	
		for(int i=0;i<110;i++){
			treeNodes[i].self = i;
			treeNodes[i].left = -2;
			treeNodes[i].right = -2;
			treeNodes[i].parent = -2;
			treeNodes[i].c = '0';
			treeNodes[i].poly_calc = 0;
			for(int j=0;j<100;j++)
			   treeNodes[i].poly[j] = 0;
		}
		
		string s;
		cin>>s;
	
		int size = s.length();
		if(size == 1){
			printf("%.19lf\n" , 0.50);
			continue;						
		}
		
		int count=0;
		int last_node=0;	
		treeNodes[0].c = s[0];
		for(int i=1;i<size;i++){
		//	cout<<"size : "<<size <<" : count "<<count<<endl;
			
			if(s[i] == 'm' ||s[i] == 'M'){
				count++;
				treeNodes[count].c = s[i];
				treeNodes[count].parent = last_node;
				if(treeNodes[last_node].left == -2)
				     treeNodes[last_node].left = count;
				else
					treeNodes[last_node].right = count;	
				last_node = count;
				continue;
			}
			
			if(treeNodes[last_node].left == -2){
				treeNodes[last_node].left = -1;
				continue;
			}
			
			
			treeNodes[last_node].right = -1;
			while(treeNodes[last_node].right!=-2 && last_node>=0){
				last_node = treeNodes[last_node].parent;				
			}
			
		}
		
//		for(int i=0;i<=count;i++)
//			cout<<treeNodes[i].left<<" "<<treeNodes[i].right<<" "<<treeNodes[i].c<<endl;
	
		
		
		f(0);
		ld answer = 0;
		ld a;
		ld b;
		ld c;
		for(int i=0;i<100;i++){
		   
		  a =  (long double)treeNodes[0].poly[i];
		  b = (long double) i;
		  c = (long double) (i+1);	
		  answer += (a)/c;
		//  printf("%0.40Lf\n ",(long double)i/(long double)(i+1));
	  }
	  
	//   printf("%0.40Lf\n ",(long double)(long long)20/(long double)(long long)3);
	  
/*	  
	  for(int i=0;i<30;i++){
		  printf(" %Ld * (%d / %d) + ",treeNodes[0].poly[i] , i , i+1);
	}
*/	  
		printf("%.19Lf\n" ,answer);    

}


 printf("%.40lf\n" , ((double) -21111002 * ((double)29 / (double)41)));

 printf("%.40Lf\n" , ((ld) -21111002 * ((ld)29 / (ld)41)));

return 0;		
		
}


